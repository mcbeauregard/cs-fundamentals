Exercises

1. What are some pros and cons of using linked lists instead of arrays?
> Answer:
 Pros of using linked lists:
 - Arrays are limited by memory, especially when using exceptionally large arrays, making arrays an expensive operation in comparison to linked lists.
 - Arrays can cause the operation system to stop when memory is used up unnecessarily by a large array.
 - Linked lists can grow larger than arrays due to memory available.
 - With linked lists there are never empty placeholders because of nodes.

 Cons of using linked lists:
 - Linked lists are unpredictable because of it's memory address, which are not stored next to each other in memory, instead it's stored in a series of nodes, which contain the data/address, compared to arrays that are predictable.
 - Indexing is not possible in linked lists, instead you have to search for an element from the beginning of an element, compared to arrays where indexing is available.
 - It can be difficult to access linked listed because of nodes can exists anywhere making them tricky to find.
 - You have to access the first node in order (the head), compared to arrays, which are more accessible because you can any index right away.

2. Come up with a real world example of a linked list.
> Answer:
The first thing that comes to mind is a shuffled playlist from Google Play Music - set to be shuffled. Like a linked list, the order that a song plays is random and unpredictable.

Programming Questions

Before beginning to code, write out a plan explaining how to solve the question.

1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.

Answer:
LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
    WHILE current.next exists
     SET current node to current.next
    END WHILE
    RETURN current
 END IF
 END FUNCTION
 }
}

2. Given an unsorted singly linked list, remove all duplicates from the linked list.
  Example
  Input: a -> c -> d -> d -> a
  Output: a -> c -> d

> Answer:

function Node(data) {
  this.data = data;
  this.next = null; // by default each node will point to nothing
}

// function to remove duplicates from an unsorted list
function removeDuplicates(head) {
  let current = head;  // pointer to traverse the linked list

  while (current && current.next) {  // iterate over each node
    if (current.data === current.next.data) { // Compares nodes: to see if the current value equal to the next value
      current.next = current.next.next; // if value is a match, delete current node, by skipping to node to the next one after
    }
    else current = current.next; // only advance if no deletion
  }

  return head; // Return to the head of the list
}


3. Given an unsorted singly linked list, reverse it.
Example
  Input: a -> b -> c -> d
  Output: d -> c -> b -> a

> Answer:

// 1 -> 2 -> 3 -> 4 -> 5   1 is head and ogHead, 2 is ogHead.next and head.next
// 2 -> 1 -> 3 -> 4 -> 5   1 is ogHead and preHead, 3 is ogHead.next, 2 is head, 3 is head.next
// 3 -> 2 -> 1 -> 4 -> 5
// 4 -> 3 -> 2 -> 1 -> 5
// 5 -> 4 -> 3 -> 2 -> 1


var reverseList = function(head){
  let ogHead = head; // Define number one as our head node.

  if(!head){     // if null list, there would be no next to null and it would throw an error in code, so return head of list.
    return head;
  }

  // we want #1 to traverse throughout the list without changing the value of #1, so we're changing whatever's next to it.
  while(ogHead.next){ // traverses through our linked list. Since we are reversing the list, we always want to know what's the next node after the head node.
    let prevHead = head; // Let head be what the true previous head was.

    head = ogHead.next; // We want the head of the linkedlist to point to the number one (ogHead) next. Ie (2 -> 1) head is 2 and ogHead is 1
    ogHead.next = head.next; // Next action in loop: We need want the next number after one to point to the head's next number. Ie (2 -> 1 -> 3) head is 2 and head.next is 3, so after ogHead (1) is ogHead.next which now points to head.next, which is 3.
    head.next = prevHead; // We want the next node after head to be the previous head. So (2 -> 1) 2 is the new head. So head.next is 1, which was the previous head ie (1 -> 2). Another example is 3 -> 2, where 2 is the prevHead in the row above and now the head.next.
  }

  return head;

};
