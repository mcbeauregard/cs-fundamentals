1. A line of people at an amusement park ride.

> Answer:

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
var riders = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
riders.push("Mary");
console.log(riders);

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
console.log(riders.indexOf("Josh")); // expected output: 2

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
function findRider(rider){
  if (riders.indexOf(rider) === -1) {
    return "Could not find rider in line";
  } else {
    return riders.indexOf(rider);
  }
}

findRider("Emily");

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

var riders = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];
riders.splice(1, 0, "Melissa");

console.log(riders); // expected output: ["Vivian", "Melissa", "Ava", "Josh", "Patrick", "Mike"]

f) If Patrick wants to leave the line, how would you delete him from the array?

var riders = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];
var removed = riders.splice(3, 1);

console.log(riders); // expected output: ["Vivian", "Melissa", "Ava", "Josh", "Mike"]

2. Provide another real-world example that you can model using a data structure.

> Answer:

In some countries, there are grocery store parking lots that hang lights over every parking stall. The light will show green if it's the parking space is available, or red if a car is parked there and unavailable.

This parking stall lighting system is wicked because when you're driving-in you can quickly see what stalls are free all the way across the lot, which takes the guessing work out - no more wondering if the stall is free or not, and inching closer, only to find out the spot's taken by a mini.

So the data would be sorted by stall available versus unavailable in real-time. There are a fixed number of stalls, but you never know which spot (aka index  of the array) will be taken at any time.

3. How would your data structure allow developers to access and manipulate the data?

> Answer: It would allow developers to access the data by sorting the stalls available versus unavailable, as well as searching. After that, developers could then manipulate data by adding or subtracting new objects and matching them with an array index. You could also edit the array data by creating or removing new items or even different array groups. For example removing stalls available, and adding parking stalls for handicap or pregnant women.
