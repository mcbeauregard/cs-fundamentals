Exercises

1. What is a hash table?
> Answer:
A hash table is a type of data structure that stores values, linking each one to unique key, which then forms a key-value pair, similar to the firebase database we created back in Module 2. You can look up data via the unique key, then returning the value. Each hash table can store the key-values in an array. You should use a hash table when your data contains a variable number of consistently formatted values.

2. What is hashing?
> Answer:
Hashing handles the conversion in a hash table. It does this by converting data to a numerical index. Then the hashing function is used to assign the unique hash code to a fixed length. Once this is done, the hash table can match the key-value to it's internal array.

3. How does a hash table store data?
> Answer:
You use hash tables to store similar groups of data by "some form of identifier," such as an ID number.

4. How are hash tables and objects different?
> Answer:
Hash tables group similar type of data, where as objects can hold varying types of data together. This is important to note, since developers will need to decide which one is the best one for them to use based on their data.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
- A list of pets and their unique names.
> Answer: hash table - similar data

- The name, age, and the birthday of your best friend.
> Answer: object - varying data

- The name and location of every company in a given city.
> Answer: hash table - similar data

- All of the books checked out from a library by a particular individual.
> Answer: object - varying data

- The primary and secondary phone numbers for a contact.
> Answer: object - varying data

6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.
> Answer:

// created table using object constructor
function customerDetails(){
  this.size = 0;
  this.customerData = {};
}

// Returns the object at the specified key if it exists, otherwise returns undefined.
customerDetails.prototype.get = function(phoneNumber) {
  return this.customerData[phoneNumber];
}

// Insert a key and a value into the hash table. Returns null if the key isn't already in the hash table; returns the previous value associate with the key if the key is already in the hash table.
customerDetails.prototype.put = function(name, address, phoneNumber){
  if(this.customerData.hasOwnProperty(phoneNumber)){
    throw new Error(element + "Hash table cannot contain duplicates")
  }
   else {
     this.customerData[phoneNumber] = name + ": " + address + " " + phoneNumber;
     this.size += 1;
     return this.customerData;
   }
}

// Takes in a key "Returns a Boolean value indicating whether or not value is in the Hashtable."
customerDetails.prototype.contains = function(key){
  if(this.customerData.hasOwnProperty(key)){
    return true;
  }
  else {
    return false;
  }
}

// returns enumeration (all) of the values contain in the table
customerDetails.prototype.enumerate = function () {
  for(var element in this){
    console.log(element + " " + this.customerData[element])
  }
  return this.customerData;
 }

// Creates hashtable
var customer = new customerDetails();
customer.put("Michelle","#123 Quebec Street, Vancouver", "604-123-4567");
customer.put("Joe","#124 Quebec Street, Vancouver", "604-123-4568");
console.log(customer.get("604-123-4567"));


7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.
> Answer:

// created table using object constructor
function HashTable(){
  this.size = 0;
  this.inventoryData = {};
}

// Returns the object at the specified key if it exists, otherwise returns undefined.
HashTable.prototype.get = function(product) {
  return this.inventoryData[product];
}

// Insert a key and a value into the hash table. Returns null if the key isn't already in the hash table; returns the previous value associate with the key if the key is already in the hash table.
HashTable.prototype.put = function(product, inventory, type){
  if(this.inventoryData.hasOwnProperty(product)){
    throw new Error(element + "Hash table cannot contain duplicates")
  }
   else {
     this.inventoryData[product] = product + ": " + inventory + ", " + type;
     this.size += 1;
     return this.inventoryData;
   }
}

// Takes in a key "Returns a Boolean value indicating whether or not value is in the Hashtable."
HashTable.prototype.contains = function(key){
  if(this.inventoryData.hasOwnProperty(key)){
    return true
  }
  else {
    return false;
  }
}

// returns enumeration (all) of the values contain in the table
HashTable.prototype.enumerate = function () {
  for(var element in this){
    console.log(element + " " + this.inventoryData[element])
  }
  return this.inventoryData;
 }

// Creates hashtable
var item = new HashTable();
item.put("Diamond", 100, "Jewelery");
item.put("Pearl",25, "Jewelery");
item.put("Watches", 50, "Accessory");
console.log(item.get("Watches"));

8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.
> Answer:

// created table using object constructor
function HashTable(){
  this.size = 0;
  this.newspaperArchiveData = {};
}

// Returns the object at the specified key if it exists, otherwise returns undefined.
HashTable.prototype.get = function(publisher, publicationDate) {
  return this.newspaperArchiveData[publisher, publicationDate];
}

// Insert a key and a value into the hash table. Returns null if the key isn't already in the hash table; returns the previous value associate with the key if the key is already in the hash table.
HashTable.prototype.put = function(publisher, publicationDate){
  if(this.newspaperArchiveData.hasOwnProperty(publisher) && this.newspaperArchiveData.hasOwnProperty(publicationDate)){
    throw new Error(element + "Hash table cannot contain duplicates")
  }
   else {
     this.newspaperArchiveData[publisher] =  publisher + " " + publicationDate;
     this.newspaperArchiveData[publicationDate] =  publisher + " " + publicationDate;
     this.size += 1;
     return this.newspaperArchiveData;
   }
}

// Takes in a key "Returns a Boolean value indicating whether or not value is in the Hashtable."
HashTable.prototype.contains = function(key){
  if(this.newspaperArchiveData.hasOwnProperty(key)){
    return true;
  }
  else {
    return false;
  }
}

// returns enumeration (all) of the values contain in the table
HashTable.prototype.enumerate = function () {
  for(var element in this){
    console.log(element + " " + this.newspaperArchiveData[element])
  }
  return this.newspaperArchiveData;
 }

// Creates hashtable
var newspaper = new HashTable();
newspaper.put("Fleming", "2018");
newspaper.put("Fulton", "2017");
newspaper.put("Allbritton", "2016");
console.log(newspaper.get("Fleming", "2018"));
